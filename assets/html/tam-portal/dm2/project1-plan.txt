------------------------------
	DM2 - Project 1 - SNAKE
------------------------------
	Notes:
		- Snake could be array of grid spots "activated"
		- Be able to turn off edge collision
		- Be able to change speed of snake
		- segments and food are "dot" class
			- with class attributes: grid coordinates of dot, type of dot (food, snake)

------------------
Initial Algorithm:
------------------
	(game start)
		display start screen
		render snake
		place food
		start snake moving in initial direction
	(move snake)
		(waiting for user input - arrow keys)
			change snakes direction
		(waiting for food)
			add segment to snake
			increase speed
			move food
		(collision with self)
			GAME OVER
		(collision with edge)
			GAME OVER

--------------------
Algorithm Version 2:
--------------------
	* display menu
		draw start menu
	* game start
		draw snake
		draw food
		while (head coords != wall coords)
			move snake
			if (head coords == food coords)
				add snake segment
				draw food
				increase speed
	?		if (user input)
				change snake direction
			(pause for time specified by current speed)

	? event listener for user input


--------------------		
Necessary Functions:
--------------------

	* draw snake
		-arguments: snake object
		-does: updates grid and segments of snake given snake object
		-returns: void

		drawSnake(snake)

	* add snake segment
		-arguments: snake object

		addSegment(snake)

	* change snake direction
		-arguments: snake object
		-does: changes snake direction so move snake knows where to draw dots
		-returns: void

	* draw food
		-arguments: food object
		-does: randomizes coordinates, draws food, erases old food
		-returns: void

	* move snake
		-arguments: snake object, current direction
		-does: draw new head, erase tail segment given
		-returns: void

	* check collision (maybe replaced by while loop condition)
		-arguments: snake object, food object
		-does: compare food position and snake head position, snake head & window edges

	* increase speed
		-arguments: snake object, (difficulty mode to determine how much)
		-does:
		-returns: void

	* convert screen pixel coords to game grid coords
		-arguments: pixel value
		-returns: grid value

	* convert game grid coords to screen pixel coords
		-arguments: grid value
		-returns: pixel value

	* draw start menu
		-does: draws start button, title, etc.


--------------------------
Necessary Data Structures:
--------------------------

	Global Variables
	---------------- 
		* size of game grid pixels (individual ht. wd. maybe)

	OBJECTS
	-------
		* snake
			- length 
				(int)
				- number segements
			- segments 
				(array)
				- array of dot objects that make up the snake

			- current direction
				- up, down, left, right
				? make global constants with int values (UP, DOWN, LEFT, RIGHT)
			- current speed

			* segments in snake
				- grid "coordinates" of segment (dot objects)

		* dot
			- x position
			- y position
			- height (determined by global var) 
			- width (determined by global var)
			* type of dot
				- food
				- snake
					- head, tail or body



